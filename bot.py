import asyncio
import datetime
import random
import html

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from gifts import calculate_gift_code, get_gift_info
from config import BOT_TOKEN, CHANNEL_ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
start_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üéÇ –î–∞—Ä –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="by_date")],
    [InlineKeyboardButton(text="üåû –î–∞—Ä –¥–Ω—è", callback_data="today_gift")],
    [InlineKeyboardButton(text="üåå –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è", callback_data="energy_gift")]
])

# /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å:", reply_markup=start_kb)

# /force_send ‚Äî —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Command("force_send"))
async def force_send(message: types.Message):
    await send_daily_gift_to_channel()
    await message.answer("üì§ –î–∞—Ä –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    if callback.data == "by_date":
        await callback.message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    elif callback.data == "today_gift":
        today = datetime.date.today()
        await send_gift(callback.message, day=today.day, month=today.month, year=today.year, title="üåû –î–∞—Ä –¥–Ω—è")
    elif callback.data == "energy_gift":
        a, b = random.randint(1, 9), random.randint(1, 9)
        c = reduce_to_single_digit(a + b)
        code = f"{a}-{b}-{c}"
        await send_gift(callback.message, code=code, title="üåå –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@dp.message(F.text.regexp(r"^\d{1,2}\.\d{1,2}\.\d{4}$"))
async def handle_date(message: types.Message):
    try:
        day, month, year = map(int, message.text.split("."))
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    await send_gift(message, day=day, month=month, year=year, title="üéÅ –¢–≤–æ–π –¥–∞—Ä")

# –ó–∞–≥–ª—É—à–∫–∞
@dp.message()
async def catch_all(message: types.Message):
    await message.answer("üòÖ –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_gift(message, day=None, month=None, year=None, title="–î–∞—Ä", code=None):
    if code is None:
        code = calculate_gift_code(day, month, year)
    gift = get_gift_info(code)

    if not gift:
        await message.answer(f"‚ö†Ô∏è –î–∞—Ä —Å –∫–æ–¥–æ–º {code} –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        name = html.escape(gift.get("name", ""))
        ma_ji_kun = html.escape(gift.get("ma_ji_kun", ""))
        description = html.escape(gift.get("description", ""))
        caption = f"<b>{title}: {name}</b>\n\n{ma_ji_kun}\n\n{description}"

        if gift.get("getgems_url"):
            caption += f"\n\n<a href=\"{html.escape(gift['getgems_url'])}\">–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>"

        await bot.send_photo(
            chat_id=message.chat.id,
            photo=gift["image_url"],
            caption=caption,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞—Ä–∞] {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ä–∞.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–∞—Ä–∞ –¥–Ω—è –≤ –∫–∞–Ω–∞–ª
def setup_scheduler():
    scheduler = AsyncIOScheduler(timezone="UTC")

    # 5:00 UTC = 9:00 –ø–æ –¢–±–∏–ª–∏—Å–∏
    @scheduler.scheduled_job("cron", hour=5, minute=0)
    async def scheduled_send():
        await send_daily_gift_to_channel()

    scheduler.start()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞—Ä–∞ –¥–Ω—è –≤ –∫–∞–Ω–∞–ª
async def send_daily_gift_to_channel():
    today = datetime.date.today()
    code = calculate_gift_code(today.day, today.month, today.year)
    gift = get_gift_info(code)

    if not gift:
        print(f"[AUTO] –î–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {code}")
        return

    try:
        name = html.escape(gift.get("name", ""))
        ma_ji_kun = html.escape(gift.get("ma_ji_kun", ""))
        description = html.escape(gift.get("description", ""))
        caption = f"<b>üåû –î–∞—Ä –¥–Ω—è: {name}</b>\n\n{ma_ji_kun}\n\n{description}\n\n–í <a href=\"https://t.me/yup64dara_bot\">–±–æ—Ç–µ</a> –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –¥–∞—Ä–∞—Ö"

        if gift.get("getgems_url"):
            caption += f"\n\n<a href=\"{html.escape(gift['getgems_url'])}\">–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>"

        await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=gift["image_url"],
            caption=caption,
            parse_mode="HTML"
        )
        print("üì§ –î–∞—Ä –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        print(f"[AUTO ERROR] {e}")

# –£—Ç–∏–ª–∏—Ç–∞: —Å–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ
def reduce_to_single_digit(num):
    while num > 9:
        num = sum(int(d) for d in str(num))
    return num

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    setup_scheduler()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)
